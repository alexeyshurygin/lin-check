/*
 * Lincheck - Linearizability checker
 *
 * Copyright (C) 2015-2022 Devexperts, LLC
 * Copyright (C) 2023 Devexperts Ireland Limited
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

package com.devexperts.dxlab.lincheck.execution;

import com.devexperts.dxlab.lincheck.Actor;
import com.devexperts.dxlab.lincheck.strategy.Strategy;

import java.util.List;

/**
 * This class represents an execution scenario, which
 * is generated by an {@link ExecutionGenerator} and then \
 * used by a {@link Strategy} which produces an {@link ExecutionResult}.
 */
public class ExecutionScenario {
    /**
     * The initial sequential part of the execution.
     * It helps to produce different initial states
     * before the parallel part.
     */
    public final List<Actor> initExecution;
    /**
     * The parallel part of the execution, which is used
     * to find an interleaving with incorrect behaviour.
     */
    public final List<List<Actor>> parallelExecution;
    /**
     * The last sequential part is used to test that
     * the data structure is in a correct state.
     */
    public final List<Actor> postExecution;

    public ExecutionScenario(List<Actor> initExecution, List<List<Actor>> parallelExecution, List<Actor> postExecution) {
        this.initExecution = initExecution;
        this.parallelExecution = parallelExecution;
        this.postExecution = postExecution;
    }

    /**
     * Returns the number of threads used in
     * the parallel part of this execution.
     */
    public int getThreads() {
        return parallelExecution.size();
    }
}
